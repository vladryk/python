
  функции и методы в Python — это практически одно и то же, за исключением того, что методы всегда
ожидают первым параметром ссылку на сам объект (self).

  Перегрузка операторов — один из способов реализации полиморфизма, когда мы можем задать свою реализацию
какого-либо метода в своём классе.
Например, у нас есть два класса:

class A:
    def go(self):
        print('Go, A!')

class B(A):
    def go(self, name):
        print('Go, {}!'.format(name))

В данном примере класс B наследует класс A, но переопределяет метод go,
поэтому он имеет мало общего с аналогичным методом класса A.


  Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
Инкапсуляция делает некоторые из компонент доступными только внутри класса. Инкапсуляция в Python работает лишь
на уровне соглашения между программистами о том, какие атрибуты являются общедоступными, а какие — внутренними.
Одиночное подчеркивание в начале имени атрибута говорит о том, что переменная или метод не предназначен для
использования вне методов класса, однако атрибут доступен по этому имени.
Двойное подчеркивание в начале имени атрибута даёт большую защиту: атрибут становится недоступным по этому имени.
Однако полностью это не защищает, так как атрибут всё равно остаётся доступным под именем _ИмяКласса__ИмяАтрибута

  Наследование подразумевает то, что дочерний класс содержит все атрибуты родительского класса, при этом некоторые
из них могут быть переопределены или добавлены в дочернем.

  Полиморфизм - разное поведение одного и того же метода в разных классах. Например, мы можем сложить два числа,
и можем сложить две строки. При этом получим разный результат, так как числа и строки являются разными классами.